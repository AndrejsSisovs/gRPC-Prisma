// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.12.4
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "product";

export interface PaginationDto {
  page: number;
  skip: number;
}

export interface UpdateProductRequest {
  id: string;
  name: string;
  price: number;
  sale: boolean;
  /** Availibility as string */
  availibility: string;
  description: string;
}

export interface Empty {
}

export interface GetProductByIdRequest {
  id: string;
}

export interface Products {
  products: Product[];
}

export interface CreateProductRequest {
  name: string;
  price: number;
  sale: boolean;
  /** Availibility as string */
  availibility: string;
  description: string;
}

export interface Product {
  id: number;
  name: string;
  price: number;
  sale: boolean;
  /** Availibility as string */
  availibility: string;
  /** Optional description content */
  description: string;
  createdAt: string;
  updatedAt: string;
}

export const PRODUCT_PACKAGE_NAME = "product";

export interface ProductServiceClient {
  createProduct(request: CreateProductRequest): Observable<Product>;

  listProducts(request: Empty): Observable<Products>;

  getProductById(request: GetProductByIdRequest): Observable<Product>;

  updateProduct(request: UpdateProductRequest): Observable<Product>;

  removeProduct(request: GetProductByIdRequest): Observable<Product>;

  queryProducts(request: Observable<PaginationDto>): Observable<Products>;
}

export interface ProductServiceController {
  createProduct(request: CreateProductRequest): Promise<Product> | Observable<Product> | Product;

  listProducts(request: Empty): Promise<Products> | Observable<Products> | Products;

  getProductById(request: GetProductByIdRequest): Promise<Product> | Observable<Product> | Product;

  updateProduct(request: UpdateProductRequest): Promise<Product> | Observable<Product> | Product;

  removeProduct(request: GetProductByIdRequest): Promise<Product> | Observable<Product> | Product;

  queryProducts(request: Observable<PaginationDto>): Observable<Products>;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createProduct", "listProducts", "getProductById", "updateProduct", "removeProduct"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["queryProducts"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
